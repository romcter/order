package com.shop.order.service.impl;import com.shop.order.dto.OrderDto;import com.shop.account.exception.ResourceNotFoundException;import com.shop.order.dto.OrderMapper;import com.shop.order.entity.OrderEntity;import com.shop.order.repository.OrderRepository;import com.shop.order.service.OrderService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.dao.EmptyResultDataAccessException;import org.springframework.stereotype.Service;import javax.persistence.EntityNotFoundException;import java.util.Optional;@Servicepublic class OrderServiceImpl implements OrderService {    @Autowired    private OrderRepository orderRepository;    @Override    public OrderDto getOrder(Long id) {        try {            Optional<OrderEntity> order = orderRepository.findById(id);            return isPresentOrder(order);        } catch (EntityNotFoundException ex) {            throw new ResourceNotFoundException(ex.getMessage());        }    }    @Override    public OrderDto addOrder(OrderDto userDto) {        OrderEntity order = orderRepository.save(OrderMapper.INSTANCE.orderDtoToOrder(userDto));        return OrderMapper.INSTANCE.orderToOrderDto(order);    }    @Override    public OrderDto updateOrder(OrderDto userDto) {        try {            if (!orderRepository.existsById(userDto.getId())) {                Optional<OrderEntity> order = orderRepository.findById(userDto.getId());                return isPresentOrder(order);            }            else throw new EntityNotFoundException();        } catch (EntityNotFoundException ex) {            throw new ResourceNotFoundException(ex.getMessage());        }    }    @Override    public void deleteOrder(Long id) {        try {            orderRepository.deleteById(id);        } catch (EmptyResultDataAccessException ex) {            throw new ResourceNotFoundException(ex.getMessage());        }    }    private OrderDto isPresentOrder(Optional<OrderEntity> user){        if(user.isPresent())            return OrderMapper.INSTANCE.orderToOrderDto(user.get());        else throw new EntityNotFoundException();    }}